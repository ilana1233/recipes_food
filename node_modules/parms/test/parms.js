"use strict";

var parms = require('../');
var should = require('should');
/* jshint laxcomma: true */
/* globals describe, it */

describe('parms(source)', function()
{
	it("should throw a TypeError if passed no arguments", function()
	{
		parms.should.throw("Expecting function or string source");
	});

	it("should throw a TypeError if passed a source that is not a string or function", function()
	{
		parms.bind(null, true).should.throw("Expecting function or string source");
	});

	it("should throw an Error if passed a source that is not valid function syntax", function()
	{
		parms.bind(null, "foo").should.throw("Unable to parse function source");
	});

	it("should return array", function()
	{
		parms(function() {}).should.be.an.instanceOf(Array);
	});

	it("should return an array with length equal to the number of function parameters", function()
	{
		parms(function() {}).length.should.be.exactly(0);
		parms(function(foo) {}).length.should.be.exactly(1);
		parms(function(foo, bar) {}).length.should.be.exactly(2);
		parms(function(foo, bar, baz) {}).length.should.be.exactly(3);
	});

	// Be very careful when modifying this function. The tests below have expected values hard coded to matching it.
	var test = function(/* comment1 */ foo, bar /* comment2 */,
		/* comment3 */ baz /* comment4 */,
		// comment5
		zort
		// comment6
		,troz // comment 7
		/* comment8 /* */
		/** comment9 **/
		/**/,
		// comment10
		/* comment11 */
		/*
		 * comment12
		 */
		erm
		/* comment13 */
		// comment14
	) {};

	var parameters = parms(test);

	it("should capture the correct start offset for each parameter", function()
	{
		var correct = [0, 19, 39, 76, 115, 179];

		var param;
		for (var i = 0, max = 6; i < max; ++i) {
			param = parameters[i];
			should.exist(param.start);
			param.start.should.be.exactly(correct[i]);
		}
	});

	it("should capture the correct end offset for each parameter", function()
	{
		var correct = [18, 38, 75, 114, 178, 279];

		var param;
		for (var i = 0, max = 6; i < max; ++i) {
			param = parameters[i];
			should.exist(param.end);
			param.end.should.be.exactly(correct[i]);
		}
	});

	it("should capture the complete text for each parameter", function()
	{
		var correct = [
			"/* comment1 */ foo",
			" bar /* comment2 */",
			"\n		/* comment3 */ baz /* comment4 */",
			"\n		// comment5\n		zort\n		// comment6\n		",
			"troz // comment 7\n		/* comment8 /* */\n		/** comment9 **/\n		/**/",
			"\n		// comment10\n		/* comment11 */\n		/*\n		 * comment12\n		 */\n		erm\n		/* comment13 */\n		// comment14\n	"
		];

		var param;
		for (var i = 0, max = 6; i < max; ++i) {
			param = parameters[i];
			should.exist(param.text);
			param.text.should.be.exactly(correct[i]);
		}
	});

	it("should capture a name data object for each parameter", function()
	{
		var param;
		for (var i = 0, max = 6; i < max; ++i) {
			param = parameters[i];
			should.exist(param.name);
			param.name.should.be.an.instanceOf(Object);
		}
	});

	it("should capture the correct start offset for each parameter name", function()
	{
		var correct = [15, 20, 57, 93, 115, 241];

		var name;
		for (var i = 0, max = 6; i < max; ++i) {
			name = parameters[i].name;
			should.exist(name.start);
			name.start.should.be.exactly(correct[i]);
		}
	});

	it("should capture the correct end offset for each parameter name", function()
	{
		var correct = [18, 23, 60, 97, 119, 244];

		var name;
		for (var i = 0, max = 6; i < max; ++i) {
			name = parameters[i].name;
			should.exist(name.end);
			name.end.should.be.exactly(correct[i]);
		}
	});

	it("should capture the correct name text of each parameter", function()
	{
		var correct = [
			"foo",
			"bar",
			"baz",
			"zort",
			"troz",
			"erm"
		];

		var name;
		for (var i = 0, max = 6; i < max; ++i) {
			name = parameters[i].name;
			should.exist(name.text);
			name.text.should.be.exactly(correct[i]);
		}
	});

	it("should capture an array of comment data objects for each parameter", function()
	{
		var comments;
		for (var i = 0, imax = 6; i < imax; ++i) {
			comments = parameters[i].comments;
			should.exist(comments);
			comments.should.be.an.instanceOf(Array);

			for (var j = 0, jmax = comments.length; j < jmax; ++j) {
				should.exist(comments[j]);
				comments[j].should.be.an.instanceOf(Object);
			}
		}
	});

	it("should capture the correct number of comments for each parameter", function()
	{
		var correct = [1, 1, 2, 2, 4, 5];

		for (var i = 0, max = 6; i < max; ++i) {
			parameters[i].comments.length.should.be.exactly(correct[i]);
		}
	});

	it("should capture the correct start offset for each comment", function()
	{
		var correct = [2, 26, 44, 63, 81, 102, 122, 137, 157, 176, 184, 199, 217, 249, 267];
		var index = 0;
		var comment;

		for (var i = 0, imax = 6; i < imax; ++i) {
			for (var j = 0, jmax = parameters[i].comments.length; j < jmax; ++j) {
				comment = parameters[i].comments[j];
				should.exist(comment.start);
				comment.start.should.be.exactly(correct[index]);
				++index;
			}
		}
	});

	it("should capture the correct end offset for each comment", function()
	{
		var correct = [12, 36, 54, 73, 90, 111, 132, 150, 169, 176, 194, 210, 236, 260, 277];
		var index = 0;
		var comment;

		for (var i = 0, imax = 6; i < imax; ++i) {
			for (var j = 0, jmax = parameters[i].comments.length; j < jmax; ++j) {
				comment = parameters[i].comments[j];
				should.exist(comment.end);
				comment.end.should.be.exactly(correct[index]);
				++index;
			}
		}
	});

	it("should capture the complete text for each comment", function()
	{
		var correct = [
			' comment1 ',
			' comment2 ',
			' comment3 ',
			' comment4 ',
			' comment5',
			' comment6',
			' comment 7',
			' comment8 /* ',
			'* comment9 *',
			'',
			' comment10',
			' comment11 ',
			'\n\t\t * comment12\n\t\t ',
			' comment13 ',
			' comment14'
		];

		var index = 0;
		var comment;

		for (var i = 0, imax = 6; i < imax; ++i) {
			for (var j = 0, jmax = parameters[i].comments.length; j < jmax; ++j) {
				comment = parameters[i].comments[j];
				should.exist(comment.text);
				comment.text.should.be.exactly(correct[index]);
				++index;
			}
		}
	});

	it("should capture the correct placement for each comment", function()
	{
		var correct = [
			'before',
			'after',
			'before',
			'after',
			'before',
			'after',
			'after',
			'after',
			'after',
			'after',
			'before',
			'before',
			'before',
			'after',
			'after'
		];

		var index = 0;
		var comment;

		for (var i = 0, imax = 6; i < imax; ++i) {
			for (var j = 0, jmax = parameters[i].comments.length; j < jmax; ++j) {
				comment = parameters[i].comments[j];
				should.exist(comment.placement);
				comment.placement.should.be.exactly(correct[index]);
				++index;
			}
		}
	});

	it("should capture the correct style for each comment", function()
	{
		var correct = [
			'block',
			'block',
			'block',
			'block',
			'line',
			'line',
			'line',
			'block',
			'block',
			'block',
			'line',
			'block',
			'block',
			'block',
			'line'
		];

		var index = 0;
		var comment;

		for (var i = 0, imax = 6; i < imax; ++i) {
			for (var j = 0, jmax = parameters[i].comments.length; j < jmax; ++j) {
				comment = parameters[i].comments[j];
				should.exist(comment.style);
				comment.style.should.be.exactly(correct[index]);
				++index;
			}
		}
	});

	it("should return the same data for a function and the function's source string", function()
	{
		parms(test.toString()).should.eql(parameters);
	});
});
