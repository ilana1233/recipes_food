"use strict";

var function_rx = new RegExp('^\\s*' + require('./regexp/function'));
var block_comment = require('./regexp/block_comment');
var line_comment = require('./regexp/line_comment');
var param_part_rx = new RegExp(block_comment + '|' + line_comment + '|[\\w$]+', 'g');

/**
 * @module parms
 * @class  parms
 */

/**
 * Extract parameter information from a function or function source string.
 *
 * @function parms
 * @param    {Function|string} source
 * @return   {Array} Parameter description objects
 */
function parms(source)
{
	if (source instanceof Function) {
		source = source.toString();
	} else if (typeof source !== 'string') {
		throw new TypeError("Expecting function or string source");
	}

	var match = source.match(function_rx);
	if (!match) {
		throw new Error("Unable to parse function source");
	}

	if (/^\s*$/.test(match[1])) {
		return [];
	}

	var parameters = match[1].split(',');
	var offset = 0;
	var i, max, param, part, before;

	for (i = 0, max = parameters.length; i < max; ++i) {
		param = {
			start: offset,
			end: offset + parameters[i].length,
			text: parameters[i],
			name: null,
			comments: []
		};

		before = true;

		while (/* jshint boss: true */ match = param_part_rx.exec(param.text)) {
			part = {
				text: match[0],
				start: offset + match.index
			};

			switch (part.text.slice(0, 2)) {
				case '/*':
					param.comments.push(part);
					part.text = part.text.slice(2, -2);
					part.start += 2;
					part.style = 'block';
					part.placement = before ? 'before' : 'after';
					break;
				case '//':
					param.comments.push(part);
					part.text = part.text.slice(2);
					part.start += 2;
					part.style = 'line';
					part.placement = before ? 'before' : 'after';
					break;
				default:
					param.name = part;
					before = false;
			}

			part.end = part.start + part.text.length;
		}

		if (!param.name) {
			throw new Error("Unable to parse function parameter (missing name)");
		}

		parameters[i] = param;

		offset += param.text.length + 1;
	}

	return parameters;
}

exports = module.exports = parms;
